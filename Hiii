using System;
using System.Collections.Generic;
using System.Text;

namespace ObserverDogCsharp
{
    public abstract class Subject
    {
        public static int MAX_OB = 20;
        public Observer[] observers=new Observer [MAX_OB];
        public string name;
        public int type;
      
        public Subject(string name, int type)
        {
            this.name = name;
            this.type = type;
        }

        public virtual int RegisterObserver(Subject subject, Observer observer)
        {

            for (int i = 0; i < MAX_OB; i++)
            {
                if (subject.observers[i] == null)
                {
                    subject.observers[i] = observer;
                    return 0;
                }
                
            }
            return  RegisterObserver(subject, observer); ;
        }

        /*public virtual int unRegisterObserver(Subject subject, Observer observer)
        {
            return 0;
        }*/

        public void NotifyObservers(Subject subject)
        {
            for (int i=0; i<MAX_OB;i++)
            {
                if(subject.observers[i]!=null)
                {
                    subject.observers[i].Notify(subject.observers[i], subject);
                }
            }
        }
    }
}

using System;
using System.Collections.Generic;
using System.Text;

namespace ObserverDogCsharp
{
    public class Canary : Observer
    {
        public Canary(string name) : base(name)
        {

        }

        public void See(Canary canary, Cat cat)
        {
            cat.RegisterObserver(cat, this);
          Console.WriteLine(canary.name + " Just saw " + cat.name);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;

namespace ObserverDogCsharp
{
    public  class Cat : Subject
    {
        public Observer observer;
        public Subject subject;
        public Cat(string name, int type) : base(name, type)
        {
            
        }
        /*public enum CatEvent
        {
            SPEAK= 0
        }*/
        public void Speak(Cat cat)
        {
            Console.WriteLine("My name is " + cat.name + " miau");
            NotifyObservers(cat);
        }

       /* public override int RegisterObserver(Subject subject, Observer observer)
        {
           
        }*/
    }
}

using System;
using System.Collections.Generic;
using System.Text;

namespace ObserverDogCsharp
{
    public class Dog : Observer
    {
        public Cat cat;
        public Dog (string name): base( name)
        {

        }

     
       public void Smell(Dog dog,Cat cat )
        {
            cat.RegisterObserver(cat, this);
            Console.WriteLine(dog.name + " Just smelled " + cat.name);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Threading.Tasks;


namespace ObserverDogCsharp
{
   public abstract class Observer
    {
        public string name;
        public Observer(string name)
        {
            this.name = name;
        }

        public  void Notify(Observer observer,Subject subject)
        {
            Console.WriteLine(observer.name + " just heard " + subject.name);
        }

     
    }

  

   

}

using System;

namespace ObserverDogCsharp
{
    class Program
    {
        static void Main(string[] args)
        {
            Cat hopkins = new Cat("Hopkins", 1);
            Dog alfred = new Dog("Alfred");
            Canary Tweety = new Canary("Tweety");
            Tweety.See(Tweety, hopkins);
            alfred.Smell(alfred, hopkins);
            hopkins.Speak(hopkins);
        }
    }
}
